#include <iostream>

/***************************** 面向对象编程 -- 成员函数  *******************************************************
 * 1.可以在结构体中定义函数，作为成员的一部分；对内操作数据成员，对外提供调用接口
 *  - 在结构体中将数据与相关的成员函数组合在一起形成类，是C++在c 基础上引入的概念
 *  - class 关键字
 *  - 类可以视为一种抽象数据类型，通过相应的接口（成员函数）进行交互
 *  - 类本身形成域，称为类域
 * 
 * 2. 成员函数的声明与定义
 *  - 类内定义（隐式内联/）
 *  - 类内声明 + 类外定义
 *  - 类与编译期的两边处理(先看见结构体 / 类内的 函数定义，然后跳过函数其内部逻辑，去把剩余的部分全遍历一遍；第二次再回头来编译)
 *  - 成员函数与尾随返回类型（tail returning type）
 * 
 * 3. this 指针
 *  - 使用 this 指针引用当前对象
 *  - 基于 const 的成员函数重载
 * 
 * 4. 成员函数的名称查找与隐藏关系
 *  - 函数内部（包括形参名称）隐藏函数外部
 *  - 类内部名称隐藏外部
 *  - 使用 this 或域操作符引入依赖型名称查找
 * 
 * 5. 静态成员函数
 *  - 静态成员函数中返回静态数据成员，静态成员函数中只能使用静态成员。
 * 
 * 6. 成员函数基于引用限定符的重载（c++11）
 *********************************************************************************************************/

struct Str{
    int x = 3;   // 位于结构体域 的内部
    // 对内能够操作本结构体中的成员变量，对外可以提供调用的接口
    void fun()
    {
        std::cout<< x <<std::endl;
    }
    void fun2();
};

void fun(Str obj)
{
    std::cout<<obj.x<<std::endl;
}

class OBJ
{
    public:
        int x = 6;      // 位于 OBJ 类域的内部
        void fun(int x)     // 类内定义 ， 隐式定义，又称内联
        {
            std::cout<< x <<std::endl;     // 打印的传入的参数 x
            std::cout<<this->x<<std::endl;  // 打印的本域内的参数 x 
            std::cout<<OBJ::x<<std::endl;   // 打印的是 OBJ 类的成员变量的 x
        }
        void fun2();
        void fun3();
};

// 结构体成员函数域外定义
void Str::fun2()
{
    std::cout<< x <<std::endl;
}

// 类外定义 ， 外联
void OBJ::fun2()
{
    std::cout<<x<<std::endl;
}

// 类外定义，但是使用内联 inline 
inline void OBJ::fun3()
{
    std::cout<<x<<std::endl;
}


int main()
{
    Str obj;    // 结构体对象
    std::cout<<obj.x<<std::endl;
    fun(obj);
    obj.fun();

    OBJ obj2;  // 类对象
    int x = 10;
    obj2.fun(x);

    return 0 ;
}